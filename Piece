
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.SequentialTransition;
import javafx.animation.Timeline;

//Connect 4 piece 

//imports 
import javafx.scene.Group;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
//import javafx.scene.paint.Color;
import javafx.scene.shape.Ellipse;
import javafx.scene.transform.Translate;
import javafx.util.Duration;

//class definition 
class Piece extends Group{
	// constructor for the class
	public Piece(int type) {
		
		ImageView e_image;
		pos = new Translate();
		this.type = type;
		// store the type, make a new Ellipse and Translate, add the Translate to the Ellipse, add the Ellipse to the Group
		if(type == 1) {
		Image red = new Image("RED.png");	
		e = new Ellipse();
		//getChildren().add(e);
		e_image = new ImageView(red);
		e_image.setClip(e);
		getChildren().add(e_image);
		
		animation();
		e_image.getTransforms().add(pos);
		//e.setStrokeWidth(3);
		//e.setStroke(Color.WHITE);
		//e.setFill(Color.rgb(178, 34, 34));
		//e.setFill(Image("RED.png"));
		
		}
		else {
			Image yellow = new Image("YELLOW.png");
			e = new Ellipse();
			//getChildren().add(e);
			e_image = new ImageView(yellow);
			e_image.setClip(e);
			getChildren().add(e_image);
			animation();
			e_image.getTransforms().add(pos);
			
			//e.setStrokeWidth(3);
			//e.setStroke(Color.WHITE);
			//e.setFill(Color.rgb(218,165,32));
			}
	
	}
	
	public void animation(){
		KeyValue kv = new KeyValue(e.scaleYProperty(),-1);
		KeyFrame kf = new KeyFrame(Duration.millis(250), kv);
		
		Timeline scale = new Timeline();
		scale.getKeyFrames().add(kf);
		
		SequentialTransition st = new SequentialTransition(scale);
		st.play();
	}

	// overridden version of the resize method which resizes the piece
	@Override
	public void resize(double width, double height) {
		// call the super class method and update the centre and radius of the ellipse representing the piece
		super.resize(width, height);
		
		e.setCenterX(width / 2);
		e.setCenterY(height / 2);
		e.setRadiusX(width / 1.75);
		e.setRadiusY(height / 1.75);
	}

	//overridden version of the relocate method
	@Override
	public void relocate(double x, double y) {
		// call the superclass method and update the relevant transform
		super.relocate(x, y);
		
		pos.setX(x);
		pos.setY(y);
	}

	//private fields of the class
	private Ellipse e; 		//ellipse for rendering this piece
	private int type; 		//maintain a copy of the piece type (red or yellow) we have
	private Translate pos; 	//translate to set the position of this piece
}
